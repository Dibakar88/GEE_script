## Vector to Raster conversion


import geopandas as gpd
import rasterio
from rasterio.features import rasterize
import numpy as np
import os

def vectorize_to_raster_by_attribute(vector_path, output_raster_path, resolution, class_attribute_name, nodata_value=0):
    """
    Converts a vector file to a raster file, burning in values from a specified attribute column.

    Args:
        vector_path (str): Path to the input vector file (e.g., a shapefile).
        output_raster_path (str): Path for the output raster file.
        resolution (float): The desired output raster resolution.
        class_attribute_name (str): The name of the attribute column containing the class values.
        nodata_value (int): The value to use for areas not covered by a feature.
    """
    print(f"Reading vector file: {vector_path}")
    if not os.path.exists(vector_path):
        print(f"Error: Vector file not found at {vector_path}")
        return

    # 1. Load the vector data
    gdf = gpd.read_file(vector_path)

    # 2. Extract geometries and corresponding attribute values
    # The rasterize function expects an iterable of (geometry, value) tuples
    shapes = ((geom, value) for geom, value in zip(gdf.geometry, gdf[class_attribute_name]))

    # Get the bounding box of the vector data
    left, bottom, right, top = gdf.total_bounds

    # Calculate the new dimensions based on the desired resolution
    height = int((top - bottom) / resolution)
    width = int((right - left) / resolution)

    # Create a new transform for the output raster
    new_transform = rasterio.transform.from_origin(left, top, resolution, resolution)

    # 3. Rasterize the vector data
    print("Rasterizing vector data by attribute...")
    raster_data = rasterize(
        shapes=shapes,
        out_shape=(height, width),
        transform=new_transform,
        fill=nodata_value,  # This will be your 'no data' value
        all_touched=True,
        dtype=np.uint8  # This data type can store values from 0 to 255
    )

    # 4. Save the output raster file
    print(f"Saving raster file to: {output_raster_path}")
    with rasterio.open(
        output_raster_path,
        'w',
        driver='GTiff',
        height=height,
        width=width,
        count=1,
        dtype=raster_data.dtype,
        crs=gdf.crs,
        transform=new_transform,
        nodata=nodata_value  # Set the nodata value in the file metadata
    ) as dst:
        dst.write(raster_data, 1)

    print("Conversion complete!")

# --- Example Usage ---
# Replace with your actual file paths and attribute column name
VECTOR_FILE = "/home/dibakar88/N24E90_Training_poly_Brick/N24E90_Training_poly_Brick.shp"
OUTPUT_RASTER_FILE = "/home/dibakar88/N24E90_Training_poly_Brick/output_raster_4.tif"
DESIRED_RESOLUTION = 1e-5
CLASS_ATTRIBUTE_COLUMN = 'id'  # <<< Change 'id' to the name of your column
NODATA_VALUE = 0  # The value for areas outside your polygons

vectorize_to_raster_by_attribute(VECTOR_FILE, OUTPUT_RASTER_FILE, DESIRED_RESOLUTION, CLASS_ATTRIBUTE_COLUMN, NODATA_VALUE)
